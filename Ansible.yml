# Minimal example using environment vars or instance role credentials
# Fetch all hosts in us-east-1, the hostname is the public DNS if it exists, otherwise the private IP address
plugin: aws_ec2
regions:
  - us-east-2
filters:
  # All instances with their `Environment` tag set to `build`
  tag:Environment: build
  # All build and prod hosts
  tag:Environment:
    - build
    - prod
  instance.group-id: vpc-6d2dae06
# Ignores 403 errors rather than failing
strict_permissions: False
# Note: I(hostnames) sets the inventory_hostname. To modify ansible_host without modifying
# inventory_hostname use compose (see example below).
hostnames:
  - tag:Name=Build,Name=Prod  # Return specific hosts only
  - tag:CustomDNSName
  - dns-name
  - private-ip-address

# Example using constructed features to create groups and set ansible_host
plugin: aws_ec2
regions:
  - us-east-2
# keyed_groups may be used to create custom groups
strict: False
keyed_groups:
  # Add e.g. x86_64 hosts to an arch_x86_64 group
  - prefix: arch
    key: 'ami-08962a4068733a2b6'
  
  # Create security_groups_sg_abcd1234 group for each SG
  - key: 'security_groups|json_query("[sg-0770891164dbf219c].group_id")'
    prefix: 'security_groups'
 
  # Create a group per region e.g. aws_region_us_east_2
  - key: placement.region
    prefix: us-east-2
  # Create a group (or groups) based on the value of a custom tag "Role" and add them to a metagroup called "project"
  - key: tags['Role']
    prefix: foo
    parent_group: "webapp"
# Set individual variables with compose
compose:
  # Use the private IP address to connect to the host
  # (note: this does not modify inventory_hostname, which is set via I(hostnames))
  ansible_host: private_ip_address